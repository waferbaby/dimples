#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.join(__dir__, '..', 'lib'))

require 'dimples'
require 'dimples/version'
require 'json'
require 'trollop'

trap('SIGINT') do
  puts 'Generation cancelled!'
  exit!
end

valid_commands = %w[build]

options = Trollop.options do
  version "dimples v#{Dimples::VERSION}"
  banner <<-EOS
A very, very simple static site generator.

Usage:
dimples <#{valid_commands.join('|')}> [options]

Options:
EOS
  opt :config, 'Config file path', type: :string
  opt :lib, 'Library file path', default: 'lib'
  opt :verbose, 'Verbose mode', default: false
end

Trollop.educate if ARGV.empty?
command = ARGV[0]

unless valid_commands.include?(command)
  Trollop.die "Command must be '#{valid_commands.join('\', \'')}'"
end

lib_path = File.join(Dir.pwd, options[:lib])
config_path = options[:config] || File.join(Dir.pwd, 'config.json')

if File.exist?(config_path)
  begin
    config = JSON.parse(File.read(config_path), symbolize_names: true)
  rescue
    Trollop.die "Invalid or malformed config file (#{config_path})"
  end
else
  Trollop.die "Unable to find config file (#{config_path})"
end

config[:verbose_logging] = options[:verbose] || false

if Dir.exist?(lib_path)
  Dir.glob(File.join(lib_path, '**', '*.rb')) do |path|
    require path
  end
end

site_klass = if config[:class_overrides][:site]
               Object.const_get(config[:class_overrides][:site])
             else
               Dimples::Site
             end

site = site_klass.new(config)

case command.to_sym
when :build
  Dimples.logger.info("Building site at #{site.output_paths[:site]}...")

  result = Benchmark.measure do
    site.generate
  end

  if site.generated?
    generation_time = result.real.round(2)

    message = "\033[92mDone!\033[0m Site built in #{generation_time} second"
    message += 's' if generation_time != 1
    message += '.'

    Dimples.logger.info(message)
  else
    site.errors.each do |error|
      Dimples.logger.error(error)
    end
  end
end
